# -*- coding: utf-8 -*-
"""main_scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F44V8uPUvoYGADew8l8WKGDPDV6krLBq
"""

import numpy as np

def LinearModel(x,a,b):
    y=a*x+b
    return y

def compute_mse(tab_yobs,tab_ypred):
    sum=0
    for yobs,ypred in zip(tab_yobs,tab_ypred):
        sum= sum+ (yobs-ypred)**2
    mse=1*(sum)/(2*tab_yobs.shape[0])
    return mse

#-(1/m)*(y_obs-(aX+b))*X
def gradient_descent(a,b,tab_yobs,tab_X,l=0.1):
    derA=-(1/tab_yobs.shape[0])*(np.sum(tab_yobs-(a*tab_X+b))*tab_X)
    a=a-l*derA
    derB=-(1/tab_yobs.shape[0])*(np.sum(tab_yobs-(a*tab_X+b))*tab_X)
    b=b-l*derB
    return a,b

def update_params(a,b,X,y,l=0.1):
            #pred=Linearmodel(X,y)
            a,b=gradient_descent(a,b,X,y,l)
            return compute_mse(y,a*X+b), a, b

def GLinearRegression(X:np.ndarray,y:np.array,l=0.1,epsilon=10**(-6),max_iter=10000):

    a,b=0,0    #def glinear():

    if X.ndim<=2:
        jcurrent,a,b=update_params(a,b,X,y)
        print("A",a)
        print("b",b)
        print("Jcurrent :",jcurrent)



        for  i in range(max_iter):
            jprevious=jcurrent
            jcurrent,a,b=update_params(a,b,X,y)
            print("Jprevious",jprevious)
            print("New Jcurrent",jcurrent)

            if np.abs(jcurrent-jprevious)<epsilon and a!=0:
                print(f"Equal J: current{jcurrent} previous {jprevious}")
                break






    else:
        print("Shape not used !")
        return GLinearRegression(X,y)
    return a,b
    #print("Ã§a marcheeee!!!!")

import numpy as np
A=np.linspace(1,100,5)

A.ndim

A.shape

len(A)

print(A)

X=np.random.rand(5,)

gradient_descent
a,b=GLinearRegression(X,A, l=0.1, epsilon=10**(-6))

print(a)

print(b)

X.shape[0]

